/*
 * Сервис проверки контрагентов с целью ПОД/ФТ
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using ComplianceService.Filters;
using Swashbuckle.Swagger;
using Microsoft.OpenApi.Models;
using Microsoft.Extensions.Hosting;
using System.Security.Cryptography.X509Certificates;
using ComplianceService.Settings;
using ComplianceService.Services;
using ComplianceService.Controllers;
using Microsoft.AspNetCore.Http;

namespace ComplianceService
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        private readonly  IWebHostEnvironment  _hostingEnv;
        private IConfiguration Configuration { get; }
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="env"></param>
        /// <param name="configuration"></param>
        public Startup(IWebHostEnvironment env, IConfiguration configuration)
        {
            _hostingEnv = env;
            //var builder = new ConfigurationBuilder()
            //.AddJsonFile("appsettings.json");
            //Configuration = builder.Build();
            Configuration = configuration;

        }
        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton(Configuration);
            services.Configure<ConnectionSettings>(Configuration.GetSection("BankApiSettings"));
            services.Configure<CertificateSettings>(Configuration.GetSection("CertificateSettings"));
            services.PostConfigure<CertificateSettings>(c => c.CertificatePassword = Configuration.GetSection("CERT_PSW").Value);
            services.AddScoped<BankCheckService>();
            services.AddScoped<FedsfmCheckService>();
            services.AddCertificateForwarding(options =>
            {
                options.CertificateHeader = "X-SSL-CERT";
                options.HeaderConverter = (headerValue) =>
                {
                    X509Certificate2 clientCertificate = null;

                    if (!string.IsNullOrWhiteSpace(headerValue))
                    {
                        byte[] bytes = StringToByteArray(headerValue);
                        clientCertificate = new X509Certificate2(bytes);
                    }
                    return clientCertificate;
                };
            });
            services.AddMvc();
            services.AddControllersWithViews();
            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("1.0.2-oas3", new OpenApiInfo
                    {
                        Version = "1.0.2-oas3",
                        Title = "Сервис проверки контрагентов с целью ПОД/ФТ",
                        Description = "Сервис проверки контрагентов с целью ПОД/ФТ (ASP.NET Core 3.0)",
                        Contact = new Microsoft.OpenApi.Models.OpenApiContact() 
                        {
                           Name = "rbronnikov@alfaleasing.ru",
                           Url = new Uri("https://github.com/swagger-api/swagger-codegen"),
                           Email = ""
                        },
                        TermsOfService = null
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{_hostingEnv.ApplicationName}.xml");
                    c.OperationFilter<GeneratePathParamsValidationFilter>();
                });
        }
        private static byte[] StringToByteArray(string hex)
        {
            int NumberChars = hex.Length;
            byte[] bytes = new byte[NumberChars / 2];

            for (int i = 0; i < NumberChars; i += 2)
            {
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            }

            return bytes;
        }
        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        /// <param name="loggerFactory"></param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory = LoggerFactory.Create(builder =>
            {
                builder.ClearProviders();
                builder.AddConsole();
            });
            ILogger logger = loggerFactory.CreateLogger<Startup>();
            logger.LogInformation("ComplianceService is started");
            app.UseCertificateForwarding();
            app
                .UseDefaultFiles()
                .UseStaticFiles()
                .UseSwagger()
                .UseSwaggerUI(c =>
                {
                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                    c.SwaggerEndpoint("/swagger/1.0.2-oas3/swagger.json", "Сервис проверки контрагентов с целью ПОД/ФТ");
                    //TODO: Or alternatively use the original Swagger contract that's included in the static files
                    // c.SwaggerEndpoint("/swagger-original.json", "Сервис проверки контрагентов с целью ПОД/ФТ Original");
                });
            app.UseRouting();
            app.UseCertificateForwarding();
            app.UseAuthentication();
            app.UseAuthorization();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
            //if (env.IsDevelopment())
            //{
            //    app.UseDeveloperExceptionPage();
            //}
            //else
            //{
            //    //TODO: Enable production exception handling (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling)
            //    // app.UseExceptionHandler("/Home/Error");
            //}
        }
    }
}
