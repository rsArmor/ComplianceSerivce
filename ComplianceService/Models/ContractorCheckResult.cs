/*
 * Сервис проверки контрагентов с целью ПОД/ФТ
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ComplianceService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContractorCheckResult : IEquatable<ContractorCheckResult>
    { 
        /// <summary>
        /// Название проверки
        /// </summary>
        [DataMember(Name="checkName")]
        public string CheckName { get; set; }

        /// <summary>
        /// Описание
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Коды риска
        /// </summary>
        [DataMember(Name="riskCodes")]
        public string RiskCodes { get; set; }

        /// <summary>
        /// Проверка успешна
        /// </summary>
        /// <value>dsdads</value>
        [DataMember(Name="isSucces")]
        public bool? IsSucces { get; set; }

        /// <summary>
        /// Наименование контрагента
        /// </summary>
        [DataMember(Name="contractorName")]

        public string ContractorName { get; set; }
        /// <summary>
        /// Источник проверки
        /// </summary>
        [DataMember(Name = "checkSource")]
        public string CheckSource { get; set; }
        /// <summary>
        /// Необходима ручная проверка
        /// </summary>
        [DataMember(Name = "isNeedHandCheck")]
        public bool? IsNeedHandCheck { get; set; }      
        /// <summary>
        /// Returns the string presentation of the object 
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractorCheckResult {\n");
            sb.Append("  CheckName: ").Append(CheckName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RiskCodes: ").Append(RiskCodes).Append("\n");
            sb.Append("  IsSucces: ").Append(IsSucces).Append("\n");
            sb.Append("  ContractorName: ").Append(ContractorName).Append("\n");
            sb.Append("  CheckSource: ").Append(CheckSource).Append("\n");
            sb.Append("  CheckSource: ").Append(IsNeedHandCheck).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContractorCheckResult)obj);
        }

        /// <summary>
        /// Returns true if ContractorCheckResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractorCheckResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractorCheckResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CheckName == other.CheckName ||
                    CheckName != null &&
                    CheckName.Equals(other.CheckName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RiskCodes == other.RiskCodes ||
                    RiskCodes != null &&
                    RiskCodes.Equals(other.RiskCodes)
                ) && 
                (
                    IsSucces == other.IsSucces ||
                    IsSucces != null &&
                    IsSucces.Equals(other.IsSucces)
                ) && 
                (
                    ContractorName == other.ContractorName ||
                    ContractorName != null &&
                    ContractorName.Equals(other.ContractorName)
                ) &&
                (
                    CheckSource == other.CheckSource ||
                    CheckSource != null &&
                    CheckSource.Equals(other.CheckSource)
                ) &&
                (
                    IsNeedHandCheck == other.IsNeedHandCheck ||
                    IsNeedHandCheck != null &&
                    IsNeedHandCheck.Equals(other.IsNeedHandCheck)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CheckName != null)
                    hashCode = hashCode * 59 + CheckName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RiskCodes != null)
                    hashCode = hashCode * 59 + RiskCodes.GetHashCode();
                    if (IsSucces != null)
                    hashCode = hashCode * 59 + IsSucces.GetHashCode();
                    if (ContractorName != null)
                    hashCode = hashCode * 59 + ContractorName.GetHashCode();
                    if (CheckSource != null)
                    hashCode = hashCode * 59 + CheckSource.GetHashCode();
                if (IsNeedHandCheck != null)
                    hashCode = hashCode * 59 + IsNeedHandCheck.GetHashCode();
                return hashCode;
            }
        }       
        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ContractorCheckResult left, ContractorCheckResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContractorCheckResult left, ContractorCheckResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
