/*
 * Сервис проверки контрагентов с целью ПОД/ФТ
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ComplianceService.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class IdentityCard : IndividualParams, IEquatable<IdentityCard>
    { 
        /// <summary>
        /// Тип документа удостоверяющего личность
        /// </summary>
        /// <value>Тип документа удостоверяющего личность</value>
        [DataMember(Name="typeIdentityDocument")]
        public string TypeIdentityDocument { get; set; }

        /// <summary>
        /// Дата выдачи ДУЛ
        /// </summary>
        /// <value>Дата выдачи ДУЛ</value>
        [DataMember(Name="dateOfIssue")]
        public DateTime? DateOfIssue { get; set; }

        /// <summary>
        /// Серия документа
        /// </summary>
        /// <value>Серия документа</value>
        [DataMember(Name="serialIdentityCard")]
        public string SerialIdentityCard { get; set; }

        /// <summary>
        /// Номер документ
        /// </summary>
        /// <value>Номер документ</value>
        [DataMember(Name="numberIedentityCard")]
        public string NumberIedentityCard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityCard {\n");
            sb.Append("  TypeIdentityDocument: ").Append(TypeIdentityDocument).Append("\n");
            sb.Append("  DateOfIssue: ").Append(DateOfIssue).Append("\n");
            sb.Append("  SerialIdentityCard: ").Append(SerialIdentityCard).Append("\n");
            sb.Append("  NumberIedentityCard: ").Append(NumberIedentityCard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IdentityCard)obj);
        }

        /// <summary>
        /// Returns true if IdentityCard instances are equal
        /// </summary>
        /// <param name="other">Instance of IdentityCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityCard other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TypeIdentityDocument == other.TypeIdentityDocument ||
                    TypeIdentityDocument != null &&
                    TypeIdentityDocument.Equals(other.TypeIdentityDocument)
                ) && 
                (
                    DateOfIssue == other.DateOfIssue ||
                    DateOfIssue != null &&
                    DateOfIssue.Equals(other.DateOfIssue)
                ) && 
                (
                    SerialIdentityCard == other.SerialIdentityCard ||
                    SerialIdentityCard != null &&
                    SerialIdentityCard.Equals(other.SerialIdentityCard)
                ) && 
                (
                    NumberIedentityCard == other.NumberIedentityCard ||
                    NumberIedentityCard != null &&
                    NumberIedentityCard.Equals(other.NumberIedentityCard)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TypeIdentityDocument != null)
                    hashCode = hashCode * 59 + TypeIdentityDocument.GetHashCode();
                    if (DateOfIssue != null)
                    hashCode = hashCode * 59 + DateOfIssue.GetHashCode();
                    if (SerialIdentityCard != null)
                    hashCode = hashCode * 59 + SerialIdentityCard.GetHashCode();
                    if (NumberIedentityCard != null)
                    hashCode = hashCode * 59 + NumberIedentityCard.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IdentityCard left, IdentityCard right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IdentityCard left, IdentityCard right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
